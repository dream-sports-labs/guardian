openapi: 3.0.1
info:
  title: Guardian
  version: "1.0.0"
paths:
  /v1/passwordless/init:
    post:
      tags:
        - Passwordless
      summary: Initate the passwordless flow
      description: |
        API to signin, signup or signinup a user using passwordless flows. Currently only otp based passwordless flow is supported.

        The first time this API is called, a unique state is returned in the response. Every subsequent request to init (to resend otp), must include the state parameter in the request, otherwise it is treated as a fresh request.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PasswordlessInitRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully sent an OTP
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/State'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/passwordless/complete:
    post:
      tags:
        - Passwordless
      summary: Complete the passwordless flow
      description: |
        API to signin, signup or signinup a user using passwordless flows. Currently only otp based passwordless flow is supported.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PasswordlessCompleteRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed in or up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/signup:
    post:
      tags:
        - Password
      summary: Signup a new user using username and password
      description: |
        API to sign up a new user using username and password.

        If the username already exists, the API will return a failure, otherwise a new user is created with the given username and password.

        This API uses the clients get user API to ascertain if the username exists or not.

        This API uses the clients post user API to create a new user account with the provided credentials.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1SignupRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/signin:
    post:
      tags:
        - Password
      summary: Signin existing user using username and password
      description: |
        This API signs in an existing user using username and password.

        This API uses the clients post authenticate user API to validate if the username password combination is correct.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1SigninRequestBody'
      responses:
        '200':
          description: User is successfully signed in
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/fb:
    post:
      tags:
        - Social
      summary: Signin, Signup or Signinup using the facebook access_token
      description: |
        API to signin, signup or signinup using the facebook access_token. The access_token is verified via the https://graph.facebook.com/me endpoint.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1AuthFbRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed in
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/google:
    post:
      tags:
        - Social
      summary: Signin, Signup or Signinup user using ID token verification.
      description: |
        API to signin, signup or signinup a user using Google issued ID token.

        The id token is verified statelessly via the public keys exposed by Google using the JWKS URI.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1AuthGoogleRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/refreshToken:
    post:
      tags:
        - Session Management
      summary: API to get a new access token using the refresh token
      description: |
        API to get a new access token using the refresh token.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1RefreshTokenRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RefreshToken'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/logout:
    post:
      tags:
        - Session Management
      summary: API to revoke sessions
      description: |
        API to revoke sessions.

        If isUniversalLogout is set to true, then all refresh tokens are invalidated.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1LogoutRequestBody'
        required: true
      responses:
        '204':
          description: User is successfully logged out
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/admin/client:
    post:
      tags:
        - Client Management
      summary: Create a new OIDC client
      description: |
        Creates a new OIDC client for the tenant. The client can be used for OAuth2/OIDC flows.
        
        A unique client ID and secure client secret are automatically generated.
        
        Grant types and response types must be valid OAuth2/OIDC values.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
        required: true
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Bad Request due to invalid data or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Client name already exists for this tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Client Management
      summary: List OIDC clients
      description: |
        Retrieves a paginated list of OIDC clients for the tenant.
        
        Supports pagination through page and size query parameters.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Clients retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientListResponse'
        '400':
          description: Bad Request due to invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/client/{clientId}:
    get:
      tags:
        - Client Management
      summary: Get OIDC client by ID
      description: |
        Retrieves a specific OIDC client by its ID for the tenant.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Client Management
      summary: Update OIDC client
      description: |
        Updates an existing OIDC client. Only provided fields will be updated.
        
        Client ID and client secret cannot be modified.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
        required: true
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Bad Request due to invalid data or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Client Management
      summary: Delete OIDC client
      description: |
        Deletes an OIDC client and all its associated scopes.
        
        This action cannot be undone.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Client deleted successfully
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/client/{clientId}/scope:
    post:
      tags:
        - Client Scope Management
      summary: Add scope to OIDC client
      description: |
        Assigns a scope to an OIDC client. The scope must exist before it can be assigned.
        
        Each scope can only be assigned once to a client.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientScopeRequest'
        required: true
      responses:
        '201':
          description: Scope added to client successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeResponse'
        '400':
          description: Bad Request due to invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client or scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Scope already assigned to client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Client Scope Management
      summary: List client scopes
      description: |
        Retrieves a paginated list of scopes assigned to an OIDC client.
        
        Supports pagination through page and size query parameters.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Client scopes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeListResponse'
        '400':
          description: Bad Request due to invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/client/{clientId}/scope/{scopeId}:
    delete:
      tags:
        - Client Scope Management
      summary: Remove scope from OIDC client
      description: |
        Removes a scope assignment from an OIDC client.
        
        The scope itself is not deleted, only the assignment to the client.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: clientId
          in: path
          description: Unique identifier of the client
          required: true
          schema:
            type: string
            format: uuid
        - name: scopeId
          in: path
          description: Unique identifier of the scope
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Scope removed from client successfully
        '404':
          description: Client, scope, or client-scope assignment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    TenantIdHeader:
      name: tenant-id
      in: header
      description: tenant-id of the client integrating with guardian
      required: true
      schema:
        type: string
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
              example: Something went wrong.
    MetaInfo:
      type: object
      properties:
        ip:
          type: string
        location:
          type: string
        deviceName:
          type: string
        source:
          type: string
    Template:
      type: object
      properties:
        name:
          type: string
          example: templateName
        params:
          type: object
          example:
            variable-1: value-1
            variable-2: value-2
    Contact:
      type: object
      properties:
        channel:
          type: string
          example: sms
        identifier:
          type: string
          example: 999999999
        template:
          $ref: "#/components/schemas/Template"
    V1PasswordlessInitRequestBody:
      type: object
      properties:
        state:
          type: string
          example: state
        flow:
          type: string
          example: signin
        responseType:
          type: string
          example: token
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1PasswordlessCompleteRequestBody:
      type: object
      properties:
        state:
          type: string
          example: state
        otp:
          type: string
          example: 123456
    V1SignupRequestBody:
      type: object
      properties:
        username:
          type: string
          example: JohnTheMan
        password:
          type: string
          example: wordpass@1234
        responseType:
          type: string
          example: token
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1SigninRequestBody:
      type: object
      properties:
        username:
          type: string
          example: JohnTheMan
        password:
          type: string
          example: wordpass@1234
        responseType:
          type: string
          example: token
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1AuthGoogleRequestBody:
      type: object
      properties:
        idToken:
          type: string
        responseType:
          type: string
          example: token
        flow:
          type: string
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1AuthFbRequestBody:
      type: object
      properties:
        accessToken:
          type: string
        responseType:
          type: string
        flow:
          type: string
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1RefreshTokenRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
    V1LogoutRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
        isUniversalLogout:
          type: boolean
          default: false
    State:
      type: object
      properties:
        state:
          type: string
          example: accesstoken
        tries:
          type: number
          example: 1
        retriesLeft:
          type: number
          example: 4
        resends:
          type: number
          example: 1
        resendsLeft:
          type: number
          example: 4
        resendAfter:
          type: number
          example: 30
        isNewUser:
          type: boolean
          example: true
    Tokens:
      type: object
      properties:
        accessToken:
          type: string
          example: accesstoken
          description: Short lived Bearer JWT token to access APIs.
        refreshToken:
          type: string
          example: refreshToken
          description: Long Lived token used to refresh access token.
        idToken:
          type: string
          example: idToken
          description: type of token. Only supports Bearer for now.
        tokenType:
          type: string
          example: Bearer
          description: type of token. Only supports Bearer for now.
        expiresIn:
          type: integer
          example: 3600
          description: expiry of the access token in seconds
    RefreshToken:
      type: object
      properties:
        accessToken:
          type: string
          example: accesstoken
          description: Short lived Bearer JWT token to access APIs.
        tokenType:
          type: string
          example: Bearer
          description: type of token. Only supports Bearer for now.
        expiresIn:
          type: integer
          example: 3600
          description: expiry of the access token in seconds

    # OIDC Client Management Schemas
    CreateClientRequest:
      type: object
      required:
        - clientName
        - clientUri
      properties:
        clientName:
          type: string
          description: Human-readable name of the client
          example: "My OAuth2 Application"
          maxLength: 255
        clientUri:
          type: string
          format: uri
          description: URI of the client's homepage
          example: "https://myapp.example.com"
        contacts:
          type: array
          description: Contact email addresses for the client
          items:
            type: string
            format: email
          example: ["admin@example.com", "support@example.com"]
        grantTypes:
          type: array
          description: OAuth2 grant types that the client can use
          items:
            type: string
            enum: ["authorization_code", "client_credentials", "refresh_token"]
          example: ["authorization_code", "refresh_token"]
          default: ["authorization_code"]
        responseTypes:
          type: array
          description: OAuth2 response types that the client can use
          items:
            type: string
            enum: ["code", "token"]
          example: ["code"]
        redirectUris:
          type: array
          description: Valid redirect URIs for the client
          items:
            type: string
            format: uri
          example: ["https://myapp.example.com/callback", "https://myapp.example.com/oauth/callback"]
        logoUri:
          type: string
          format: uri
          description: URI of the client's logo
          example: "https://myapp.example.com/logo.png"
        policyUri:
          type: string
          format: uri
          description: URI of the client's privacy policy
          example: "https://myapp.example.com/privacy"
        skipConsent:
          type: boolean
          description: Whether to skip the consent screen for this client
          default: false

    UpdateClientRequest:
      type: object
      properties:
        clientName:
          type: string
          description: Human-readable name of the client
          example: "Updated OAuth2 Application"
          maxLength: 255
        clientUri:
          type: string
          format: uri
          description: URI of the client's homepage
          example: "https://myapp.example.com"
        contacts:
          type: array
          description: Contact email addresses for the client
          items:
            type: string
            format: email
          example: ["admin@example.com", "support@example.com"]
        grantTypes:
          type: array
          description: OAuth2 grant types that the client can use
          items:
            type: string
            enum: ["authorization_code", "client_credentials", "refresh_token"]
          example: ["authorization_code", "refresh_token"]
        responseTypes:
          type: array
          description: OAuth2 response types that the client can use
          items:
            type: string
            enum: ["code", "token"]
          example: ["code"]
        redirectUris:
          type: array
          description: Valid redirect URIs for the client
          items:
            type: string
            format: uri
          example: ["https://myapp.example.com/callback"]
        logoUri:
          type: string
          format: uri
          description: URI of the client's logo
          example: "https://myapp.example.com/logo.png"
        policyUri:
          type: string
          format: uri
          description: URI of the client's privacy policy
          example: "https://myapp.example.com/privacy"
        skipConsent:
          type: boolean
          description: Whether to skip the consent screen for this client

    ClientResponse:
      type: object
      properties:
        tenantId:
          type: string
          description: Tenant identifier
          example: "tenant1"
        clientId:
          type: string
          format: uuid
          description: Unique identifier of the client
          example: "550e8400-e29b-41d4-a716-446655440000"
        clientName:
          type: string
          description: Human-readable name of the client
          example: "My OAuth2 Application"
        clientSecret:
          type: string
          description: Client secret for authentication
          example: "abc123def456ghi789jkl012mno345pqr678"
        clientUri:
          type: string
          format: uri
          description: URI of the client's homepage
          example: "https://myapp.example.com"
        contacts:
          type: array
          description: Contact email addresses for the client
          items:
            type: string
            format: email
          example: ["admin@example.com"]
        grantTypes:
          type: array
          description: OAuth2 grant types that the client can use
          items:
            type: string
          example: ["authorization_code", "refresh_token"]
        responseTypes:
          type: array
          description: OAuth2 response types that the client can use
          items:
            type: string
          example: ["code"]
        redirectUris:
          type: array
          description: Valid redirect URIs for the client
          items:
            type: string
            format: uri
          example: ["https://myapp.example.com/callback"]
        logoUri:
          type: string
          format: uri
          description: URI of the client's logo
          example: "https://myapp.example.com/logo.png"
        policyUri:
          type: string
          format: uri
          description: URI of the client's privacy policy
          example: "https://myapp.example.com/privacy"
        skipConsent:
          type: boolean
          description: Whether to skip the consent screen for this client
          example: false

    ClientListResponse:
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientResponse'
        totalCount:
          type: integer
          description: Total number of clients
          example: 25
        page:
          type: integer
          description: Current page number (0-based)
          example: 0
        size:
          type: integer
          description: Number of items per page
          example: 20

    # Client-Scope Management Schemas
    CreateClientScopeRequest:
      type: object
      required:
        - scopeId
      properties:
        scopeId:
          type: string
          format: uuid
          description: Unique identifier of the scope to assign
          example: "550e8400-e29b-41d4-a716-446655440001"

    ClientScopeResponse:
      type: object
      properties:
        tenantId:
          type: string
          description: Tenant identifier
          example: "tenant1"
        clientId:
          type: string
          format: uuid
          description: Unique identifier of the client
          example: "550e8400-e29b-41d4-a716-446655440000"
        scopeId:
          type: string
          format: uuid
          description: Unique identifier of the scope
          example: "550e8400-e29b-41d4-a716-446655440001"
        scopeName:
          type: string
          description: Name of the assigned scope
          example: "user.read"
        scopeDescription:
          type: string
          description: Description of the assigned scope
          example: "Read access to user information"

    ClientScopeListResponse:
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ClientScopeResponse'
        totalCount:
          type: integer
          description: Total number of scopes assigned to the client
          example: 5
        page:
          type: integer
          description: Current page number (0-based)
          example: 0
        size:
          type: integer
          description: Number of items per page
          example: 20
