openapi: 3.0.1
info:
  title: Guardian
  version: "1.0.0"
paths:
  /v1/passwordless/init:
    post:
      tags:
        - Passwordless
      summary: Initate the passwordless flow
      description: |
        API to signin, signup or signinup a user using passwordless flows. Currently only otp based passwordless flow is supported.

        The first time this API is called, a unique state is returned in the response. Every subsequent request to init (to resend otp), must include the state parameter in the request, otherwise it is treated as a fresh request.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PasswordlessInitRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully sent an OTP
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/State'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/passwordless/complete:
    post:
      tags:
        - Passwordless
      summary: Complete the passwordless flow
      description: |
        API to signin, signup or signinup a user using passwordless flows. Currently only otp based passwordless flow is supported.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PasswordlessCompleteRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed in or up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/signup:
    post:
      tags:
        - Password
      summary: Signup a new user using username and password
      description: |
        API to sign up a new user using username and password.

        If the username already exists, the API will return a failure, otherwise a new user is created with the given username and password.

        This API uses the clients get user API to ascertain if the username exists or not.

        This API uses the clients post user API to create a new user account with the provided credentials.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1SignupRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/signin:
    post:
      tags:
        - Password
      summary: Signin existing user using username and password
      description: |
        This API signs in an existing user using username and password.

        This API uses the clients post authenticate user API to validate if the username password combination is correct.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1SigninRequestBody'
      responses:
        '200':
          description: User is successfully signed in
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/fb:
    post:
      tags:
        - Social
      summary: Signin, Signup or Signinup using the facebook access_token
      description: |
        API to signin, signup or signinup using the facebook access_token. The access_token is verified via the https://graph.facebook.com/me endpoint.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1AuthFbRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed in
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/google:
    post:
      tags:
        - Social
      summary: Signin, Signup or Signinup user using ID token verification.
      description: |
        API to signin, signup or signinup a user using Google issued ID token.

        The id token is verified statelessly via the public keys exposed by Google using the JWKS URI.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1AuthGoogleRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Tokens'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/refreshToken:
    post:
      tags:
        - Session Management
      summary: API to get a new access token using the refresh token
      description: |
        API to get a new access token using the refresh token.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1RefreshTokenRequestBody'
        required: true
      responses:
        '200':
          description: User is successfully signed up
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RefreshToken'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/logout:
    post:
      tags:
        - Session Management
      summary: API to revoke sessions
      description: |
        API to revoke sessions.

        If isUniversalLogout is set to true, then all refresh tokens are invalidated.

      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1LogoutRequestBody'
        required: true
      responses:
        '204':
          description: User is successfully logged out
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /scopes:
    get:
      tags:
        - Scope Management
      summary: List scopes
      description: |
        Retrieve a paginated list of scopes for a tenant. 
        Optionally filter by scope name using partial matching.
        
        **Query Parameters:**
        - `name`: Filter scopes by name (case-insensitive partial match)
        - `page`: Page number for pagination (starts from 1)
        - `pageSize`: Number of items per page (1-100, default: 10)
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: name
          in: query
          required: false
          description: Filter scopes by name (partial match, case-insensitive)
          schema:
            type: string
            example: "read"
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
      responses:
        '200':
          description: Successfully retrieved scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeListResponse'
              examples:
                scope_list:
                  summary: List of scopes
                  value:
                    scopes:
                      - name: "openid"
                        displayName: "OpenID"
                        description: "OpenID Connect scope"
                        claims: ["sub"]
                        iconUrl: "https://example.com/icons/openid.png"
                        isOidc: true
                      - name: "read:profile"
                        displayName: "Read Profile"
                        description: "Allows reading user profile information"
                        claims: ["name", "email", "profile"]
                        iconUrl: "https://example.com/icons/profile.png"
                        isOidc: false
        '400':
          description: Bad Request due to invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_page:
                  summary: Invalid page parameter
                  value:
                    error:
                      code: "invalid_request"
                      message: "page value cannot be less than 1"
                invalid_page_size:
                  summary: Invalid pageSize parameter
                  value:
                    error:
                      code: "invalid_request"
                      message: "pageSize must be between 1 and 100"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Scope Management
      summary: Create a new scope
      description: |
        Create a new scope for a tenant. Scopes define permissions and claims 
        that can be granted to users and applications.
        
        **Predefined OIDC Scope Validation:**
        - `openid`: Must contain only the 'sub' claim
        - `phone`: Must contain 'phone_number' and/or 'phone_number_verified' claims (maximum 2 claims)
        - `email`: Must contain 'email' and/or 'email_verified' claims (maximum 2 claims)
        - `address`: Must contain only the 'address' claim
        
        Custom scopes can have any combination of claims.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScopeRequest'
            examples:
              custom_scope:
                summary: Custom scope example
                value:
                  name: "read:profile"
                  displayName: "Read Profile"
                  description: "Allows reading user profile information"
                  claims: ["name", "email", "profile"]
                  iconUrl: "https://example.com/icons/profile.png"
                  isOidc: false
              openid_scope:
                summary: OpenID scope example
                value:
                  name: "openid"
                  displayName: "OpenID"
                  description: "OpenID Connect scope"
                  claims: ["sub"]
                  iconUrl: "https://example.com/icons/openid.png"
                  isOidc: true
              phone_scope:
                summary: Phone scope example
                value:
                  name: "phone"
                  displayName: "Phone"
                  description: "Phone number access"
                  claims: ["phone_number", "phone_number_verified"]
                  iconUrl: "https://example.com/icons/phone.png"
                  isOidc: true
              email_scope:
                summary: Email scope example
                value:
                  name: "email"
                  displayName: "Email"
                  description: "Email access"
                  claims: ["email", "email_verified"]
                  iconUrl: "https://example.com/icons/email.png"
                  isOidc: true
              address_scope:
                summary: Address scope example
                value:
                  name: "address"
                  displayName: "Address"
                  description: "Address information access"
                  claims: ["address"]
                  iconUrl: "https://example.com/icons/address.png"
                  isOidc: true
      responses:
        '201':
          description: Scope created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeResponse'
              examples:
                created_scope:
                  summary: Successfully created scope
                  value:
                    name: "read:profile"
                    displayName: "Read Profile"
                    description: "Allows reading user profile information"
                    claims: ["name", "email", "profile"]
                    iconUrl: "https://example.com/icons/profile.png"
                    isOidc: false
        '400':
          description: Bad Request due to missing parameters, invalid data, or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_name:
                  summary: Missing scope name
                  value:
                    error:
                      code: "invalid_request"
                      message: "scope name is required"
                invalid_openid_claims:
                  summary: Invalid claims for openid scope
                  value:
                    error:
                      code: "invalid_request"
                      message: "openid scope must include 'sub' claim"
                invalid_phone_claims:
                  summary: Invalid claims for phone scope
                  value:
                    error:
                      code: "invalid_request"
                      message: "phone scope must include 'phone_number' or 'phone_number_verified' claim"
                invalid_email_claims:
                  summary: Invalid claims for email scope
                  value:
                    error:
                      code: "invalid_request"
                      message: "email scope must include 'email' or 'email_verified' claim"
                invalid_address_claims:
                  summary: Invalid claims for address scope
                  value:
                    error:
                      code: "invalid_request"
                      message: "address scope must include 'address' claim"
        '409':
          description: Conflict - Scope with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                scope_exists:
                  summary: Scope already exists
                  value:
                    error:
                      code: "scope_already_exists"
                      message: "scope already exists for tenant"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /scopes/{name}:
    delete:
      tags:
        - Scope Management
      summary: Delete a scope
      description: |
        Delete a specific scope by name. This operation is irreversible and will 
        remove all associations with this scope.
        
        **Important:** Deleting a scope that is currently in use by applications 
        or users may cause authentication and authorization issues.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: name
          in: path
          required: true
          description: Name of the scope to delete
          schema:
            type: string
            example: "read:profile"
      responses:
        '204':
          description: Scope deleted successfully
        '404':
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                scope_not_found:
                  summary: Scope not found
                  value:
                    error:
                      code: "not_found"
                      message: "Scope not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/certs:
    get:
      tags:
        - Public Keys
      summary: Get JWKS public keys for the tenant
      description: |
        Returns the list of public keys (in JWKS format) associated with the tenant.
        These keys are used for verifying tokens issued by the Guardian service.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      responses:
        '200':
          description: JSON Web Key Set (JWKS) retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/JsonWebKey'
        '400':
          description: Bad Request - Invalid tenant-id header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/otp/send:
    post:
      tags:
        - OTP Verification
      summary: Send OTP for contact verification
      description: |
        API to send OTP to a contact (SMS or Email) for verification purposes. This is independent of the authentication flow and can be used for various contact verification scenarios.

        **First Request**: Send contact details to initiate OTP sending. A unique state is returned.
        
        **Resend Request**: Use the state from the previous response to resend OTP to the same contact.

        **Rate Limiting**: 
        - Maximum verification attempts per session (configurable, default: 5)
        - Maximum resend attempts per session (configurable, default: 5) 
        - Minimum interval between resends (configurable, default: 30 seconds)

        **Supported Channels**: SMS, Email

        **Error Scenarios**:
        - `invalid_request`: Missing or invalid contact details, missing required fields
        - `invalid_state`: State is invalid, expired, or not found
        - `resends_not_allowed`: Resend attempted before the minimum interval
        - `resends_exhausted`: Maximum resend attempts reached for this session
        - `sms_service_error`: External SMS service failure
        - `email_service_error`: External email service failure
        - `internal_server_error`: General server error

        **Required Headers**: `tenant-id` header is mandatory for all requests.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1OtpSendRequestBody'
        required: true
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1OtpSendResponse'
        '400':
          description: Bad Request - Various validation and rate limiting errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_request_missing_contact:
                  summary: Missing contact details
                  value:
                    error:
                      code: "invalid_request"
                      message: "Invalid contact"
                invalid_request_missing_channel:
                  summary: Missing channel in contact
                  value:
                    error:
                      code: "invalid_request"
                      message: "Invalid contact"
                invalid_request_missing_identifier:
                  summary: Missing identifier in contact
                  value:
                    error:
                      code: "invalid_request"
                      message: "Invalid contact"
                invalid_state:
                  summary: Invalid or expired state
                  value:
                    error:
                      code: "invalid_state"
                      message: "Invalid state"
                resend_not_allowed:
                  summary: Resend attempted too soon
                  value:
                    error:
                      code: "resends_not_allowed"
                      message: "Resend triggered too quick, Try again later"
                      metadata:
                        resendAfter: 1640995200
                resends_exhausted:
                  summary: Maximum resend attempts reached
                  value:
                    error:
                      code: "resends_exhausted"
                      message: "Resends exhausted"
        '500':
          description: Internal Server Error - Service failures
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                sms_service_error:
                  summary: SMS service failure
                  value:
                    error:
                      code: "sms_service_error"
                      message: "SMS service error"
                email_service_error:
                  summary: Email service failure
                  value:
                    error:
                      code: "email_service_error"
                      message: "Email service error"
                internal_server_error:
                  summary: General server error
                  value:
                    error:
                      code: "internal_server_error"
                      message: "Something went wrong"

  /v1/otp/verify:
    post:
      tags:
        - OTP Verification
      summary: Verify OTP for contact verification
      description: |
        API to verify the OTP sent to a contact. Use the state received from the send OTP API along with the OTP received by the user.

        **Verification Rules**:
        - OTP must be valid and not expired (configurable validity, default: 15 minutes)
        - Maximum verification attempts per session (configurable, default: 5)
        - State must be valid and not expired

        **Success**: Returns 204 No Content on successful verification
        
        **Error Scenarios**:
        - `invalid_request`: Missing state or OTP parameters
        - `invalid_state`: State is invalid, expired, or not found
        - `incorrect_otp`: OTP is incorrect (includes remaining retry count in metadata)
        - `retries_exhausted`: Maximum verification attempts reached for this session
        - `internal_server_error`: General server error

        **Required Headers**: `tenant-id` header is mandatory for all requests.

        **State Management**: After successful verification or when retries are exhausted, the state is automatically cleaned up and cannot be reused.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1OtpVerifyRequestBody'
        required: true
      responses:
        '204':
          description: OTP verified successfully
        '400':
          description: Bad Request - Validation errors, invalid OTP, invalid state, or retries exhausted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_request_missing_state:
                  summary: Missing state parameter
                  value:
                    error:
                      code: "invalid_request"
                      message: "State is missing"
                invalid_request_missing_otp:
                  summary: Missing OTP parameter
                  value:
                    error:
                      code: "invalid_request"
                      message: "OTP is missing"
                invalid_state:
                  summary: Invalid or expired state
                  value:
                    error:
                      code: "invalid_state"
                      message: "Invalid state"
                incorrect_otp:
                  summary: Incorrect OTP provided
                  value:
                    error:
                      code: "incorrect_otp"
                      message: "Incorrect otp"
                      metadata:
                        retriesLeft: 3
                retries_exhausted:
                  summary: Maximum verification attempts reached
                  value:
                    error:
                      code: "retries_exhausted"
                      message: "Retries exhausted"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/user/flow/block:
    post:
      tags:
        - User Flow Block
      summary: Block user flows
      description: |
        API to block specific authentication flows for a user identifier (email/phone/username). 
        This prevents the user from using the specified authentication methods.
        
        Supported flow types:
        - passwordless: Blocks passwordless authentication flows
        - password: Blocks username/password authentication flows  
        - social_auth: Blocks social authentication flows (Facebook, Google)
        - otp_verify: Blocks OTP verification flows
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1BlockUserFlowRequestBody'
        required: true
      responses:
        '204':
          description: User flows blocked successfully
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/user/flow/unblock:
    post:
      tags:
        - User Flow Block
      summary: Unblock user flows
      description: |
        API to unblock previously blocked authentication flows for a user identifier.
        This allows the user to use the specified authentication methods again.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1UnblockUserFlowRequestBody'
        required: true
      responses:
        '204':
          description: User flows unblocked successfully
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/user/flow/blocked:
    get:
      tags:
        - User Flow Block
      summary: Get blocked flows for a user
      description: |
        API to retrieve all currently blocked authentication flows for a specific user identifier.
        Returns the list of flow types that are currently blocked for the user.
      parameters:
        - $ref: '#/components/parameters/TenantIdHeader'
        - name: userIdentifier
          in: query
          description: User identifier (email, phone number, username)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blocked flows retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1UserBlockedFlowsResponse'
        '400':
          description: Bad Request due to missing parameters or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    TenantIdHeader:
      name: tenant-id
      in: header
      description: tenant-id of the client integrating with guardian
      required: true
      schema:
        type: string
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code identifying the type of error
              example: "invalid_request"
            message:
              type: string
              description: Human-readable error message
              example: "Something went wrong."
            metadata:
              type: object
              description: Additional error-specific data (optional)
              additionalProperties: true
              example:
                retriesLeft: 3
                resendAfter: 1640995200
    MetaInfo:
      type: object
      properties:
        ip:
          type: string
        location:
          type: string
        deviceName:
          type: string
        source:
          type: string
    Template:
      type: object
      properties:
        name:
          type: string
          example: templateName
        params:
          type: object
          example:
            variable-1: value-1
            variable-2: value-2
    Contact:
      type: object
      properties:
        channel:
          type: string
          example: sms
        identifier:
          type: string
          example: 999999999
        template:
          $ref: "#/components/schemas/Template"
    V1PasswordlessInitRequestBody:
      type: object
      properties:
        state:
          type: string
          example: state
        flow:
          type: string
          example: signin
        responseType:
          type: string
          example: token
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1PasswordlessCompleteRequestBody:
      type: object
      properties:
        state:
          type: string
          example: state
        otp:
          type: string
          example: 123456
    V1SignupRequestBody:
      type: object
      properties:
        username:
          type: string
          example: JohnTheMan
        password:
          type: string
          example: wordpass@1234
        responseType:
          type: string
          example: token
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1SigninRequestBody:
      type: object
      properties:
        username:
          type: string
          example: JohnTheMan
        password:
          type: string
          example: wordpass@1234
        responseType:
          type: string
          example: token
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1AuthGoogleRequestBody:
      type: object
      properties:
        idToken:
          type: string
        responseType:
          type: string
        flow:
          type: string
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1AuthFbRequestBody:
      type: object
      properties:
        accessToken:
          type: string
        responseType:
          type: string
        flow:
          type: string
        metaInfo:
          $ref: '#/components/schemas/MetaInfo'
    V1RefreshTokenRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
    V1LogoutRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
        isUniversalLogout:
          type: boolean
          default: false
    State:
      type: object
      properties:
        state:
          type: string
          example: accesstoken
        tries:
          type: number
          example: 1
        retriesLeft:
          type: number
          example: 4
        resends:
          type: number
          example: 1
        resendsLeft:
          type: number
          example: 4
        resendAfter:
          type: number
          example: 30
        isNewUser:
          type: boolean
          example: true
    Tokens:
      type: object
      properties:
        accessToken:
          type: string
          example: accesstoken
          description: Short lived Bearer JWT token to access APIs.
        refreshToken:
          type: string
          example: refreshToken
          description: Long Lived token used to refresh access token.
        idToken:
          type: string
          example: idToken
          description: type of token. Only supports Bearer for now.
        tokenType:
          type: string
          example: Bearer
          description: type of token. Only supports Bearer for now.
        expiresIn:
          type: integer
          example: 3600
          description: expiry of the access token in seconds
    RefreshToken:
      type: object
      properties:
        accessToken:
          type: string
          example: accesstoken
          description: Short lived Bearer JWT token to access APIs.
        tokenType:
          type: string
          example: Bearer
          description: type of token. Only supports Bearer for now.
        expiresIn:
          type: integer
          example: 3600
          description: expiry of the access token in seconds
    V1OtpSendRequestBody:
      type: object
      description: Request body for sending OTP. Either provide contact details for first request or state for resend.
      properties:
        state:
          type: string
          description: State from previous OTP send response (used for resending OTP)
          example: "abc123def456"
        contact:
          $ref: "#/components/schemas/Contact"
      oneOf:
        - required: ["contact"]
        - required: ["state"]
      example:
        contact:
          channel: "sms"
          identifier: "9999999999"
    V1OtpVerifyRequestBody:
      type: object
      required:
        - state
        - otp
      properties:
        state:
          type: string
          description: State received from OTP send response
          example: "abc123def456"
        otp:
          type: string
          description: OTP received by the user
          example: "123456"
          minLength: 4
          maxLength: 8
    V1OtpSendResponse:
      type: object
      description: Response after sending OTP with rate limiting information
      properties:
        state:
          type: string
          description: Unique state identifier for this OTP session
          example: "abc123def456"
        tries:
          type: integer
          description: Number of verification attempts made so far
          example: 0
          minimum: 0
        retriesLeft:
          type: integer
          description: Number of verification attempts remaining
          example: 5
          minimum: 0
        resends:
          type: integer
          description: Number of resend attempts made so far
          example: 1
          minimum: 0
        resendsLeft:
          type: integer
          description: Number of resend attempts remaining
          example: 4
          minimum: 0
        resendAfter:
          type: integer
          format: int64
          description: Seconds to wait before next resend is allowed
          example: 30
          minimum: 0
    JsonWebKey:
      type: object
      required: [kty, kid, alg, n, e]
      properties:
        kty:
          type: string
          description: Key type
          example: "RSA"
        use:
          type: string
          description: Key usage
          example: "sig"
        kid:
          type: string
          description: Key ID for identifying the key
          example: "1234567890abcdef"
        alg:
          type: string
          description: Algorithm used with the key
          example: "RS256"
        n:
          type: string
          format: base64url
          description: Modulus of the RSA public key
          example: "sXchD_VNjp6WbGLOqK2IcmhA9xyPK..."
        e:
          type: string
          format: base64url
          description: Exponent of the RSA public key
          example: "AQAB"
    V1BlockUserFlowRequestBody:
      type: object
      required:
        - userIdentifier
        - blockFlows
        - reason
        - unblockedAt
      properties:
        userIdentifier:
          type: string
          description: User identifier (email, phone number, username)
          example: "user@example.com"
        blockFlows:
          type: array
          items:
            type: string
            enum: [passwordless, password, social_auth, otp_verify]
          description: List of flow types to block
          example: ["passwordless", "social_auth"]
        reason:
          type: string
          description: Reason for blocking the flows
          example: "Suspicious activity detected"
        unblockedAt:
          type: integer
          format: int64
          description: Unix timestamp when the block should automatically expire(epoch)
          example: 1704067200
      example:
        userIdentifier: "user@example.com"
        blockFlows: ["passwordless", "social_auth"]
        reason: "Suspicious activity detected"
        unblockedAt: 1704067200



    V1UnblockUserFlowRequestBody:
      type: object
      required:
        - userIdentifier
        - unblockFlows
      properties:
        userIdentifier:
          type: string
          description: User identifier (email, phone number, username)
          example: "user@example.com"
        unblockFlows:
          type: array
          items:
            type: string
            enum: [passwordless, password, social_auth, otp_verify]
          description: List of flow types to unblock
          example: ["passwordless", "social_auth"]
      example:
        userIdentifier: "user@example.com"
        unblockFlows: ["passwordless", "social_auth"]



    V1UserBlockedFlowsResponse:
      type: object
      properties:
        userIdentifier:
          type: string
          description: User identifier
          example: "user@example.com"
        blockedFlows:
          type: array
          items:
            type: string
            enum: [passwordless, password, social_auth, otp_verify]
          description: List of currently blocked flow types
          example: ["passwordless", "social_auth"]
        totalCount:
          type: integer
          description: Total number of blocked flows
          example: 2
      example:
        userIdentifier: "user@example.com"
        blockedFlows: ["passwordless", "social_auth"]
        totalCount: 2

    ScopeResponse:
      type: object
      description: Scope information
      required:
        - name
        - isOidc
      properties:
        name:
          type: string
          description: Unique name of the scope
          example: "read:profile"
        displayName:
          type: string
          description: Human-readable display name
          example: "Read Profile"
        description:
          type: string
          description: Detailed description of the scope
          example: "Allows reading user profile information"
        iconUrl:
          type: string
          format: uri
          description: URL to the scope's icon
          example: "https://example.com/icons/profile.png"
        isOidc:
          type: boolean
          description: Whether this is an OpenID Connect standard scope
          example: true
        claims:
          type: array
          description: List of claims associated with this scope
          items:
            type: string
            example: "name"
          example: ["name", "email", "profile"]

    ScopeListResponse:
      type: object
      description: Paginated list of scopes
      required:
        - scopes
      properties:
        scopes:
          type: array
          description: Array of scope objects
          items:
            $ref: '#/components/schemas/ScopeResponse'

    CreateScopeRequest:
      type: object
      description: Request payload for creating a new scope
      required:
        - name
        - isOidc
      properties:
        name:
          type: string
          description: |
            Unique name of the scope. For predefined OIDC scopes (openid, phone, email, address), 
            specific claim validation rules apply:
            - 'openid': Must contain only 'sub' claim
            - 'phone': Must contain 'phone_number' and/or 'phone_number_verified' claims (max 2)
            - 'email': Must contain 'email' and/or 'email_verified' claims (max 2)
            - 'address': Must contain only 'address' claim
          example: "read:profile"
          minLength: 1
          maxLength: 50
        displayName:
          type: string
          description: Human-readable display name
          example: "Read Profile"
          maxLength: 100
        description:
          type: string
          description: Detailed description of the scope
          example: "Allows reading user profile information"
          maxLength: 500
        claims:
          type: array
          description: |
            List of claims associated with this scope. For predefined OIDC scopes, 
            specific claims are required and validated:
            - openid: ['sub']
            - phone: ['phone_number', 'phone_number_verified'] (one or both)
            - email: ['email', 'email_verified'] (one or both)  
            - address: ['address']
          items:
            type: string
            example: "name"
          example: ["name", "email", "profile"]
        iconUrl:
          type: string
          format: uri
          description: URL to the scope's icon
          example: "https://example.com/icons/profile.png"
        isOidc:
          type: boolean
          description: Whether this is an OpenID Connect standard scope
          example: true
